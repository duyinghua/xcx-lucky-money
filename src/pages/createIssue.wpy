<template>
    <view class="createIssue-page container">
        <scroll-view class="iss-index" scroll-x="true" scroll-left="{{issScrollLeft}}">
            <view class="li" wx:for="{{indexs}}" wx:for-index="index_i" wx:key="{{index_i}}">
                <view class="num {{index_i<issueList.length?'prev':''}} {{index_i==curIssIndex?'cur':''}}"
                      @tap="changeIndex({{index_i}})">
                    {{index_i + 1}}
                </view>
            </view>
        </scroll-view>
        <view class="tab">
            <view class="item {{curTab==1?'cur':''}}" @tap="tabHandler(1)">推荐题库</view>
            <view class="item {{curTab==2?'cur':''}}" @tap="tabHandler(2)">自定义题</view>
        </view>
        <view class="content">
            <scroll-view class="scroll-view" scroll-y="true">
                <view class="scroll-cont">
                    <view class="iss-list">
                        <view class="item">
                            <view hidden="{{curTab!=1}}">
                                <view class="picture">
                                    <image class="img" mode="aspectFill"
                                           src="{{issueList[curIssIndex].question.picURL}}"></image>
                                </view>
                                <view class="qsn-input">
                                    {{issueList[curIssIndex].question.content}}
                                </view>
                                <view class="aws-input">
                                    <view class="li {{item.isRight?'cur':''}}"
                                          wx:for="{{issueList[curIssIndex].answerList}}" wx:for-item="item"
                                          wx:for-index="a_index" wx:key="{{item.id}}">
                                        <input class="txt" placeholder="{{item.isRight?'输入正确答案':'输入错误答案'}}"
                                               maxlength="16" value="{{item.content}}" disabled="{{cantInput}}"
                                               bindinput="answerInput({{a_index}})"/>
                                        <view class="sub" @tap="setAnswer({{a_index}})">设为正确</view>
                                    </view>
                                </view>
                                <view class="buttons">
                                    <button plain="true" class="btn change-btn" @tap="changeQuestion"
                                            disabled="{{cantInput}}">换一题
                                    </button>
                                    <button plain="true" disabled="{{cantInput}}"
                                            class="btn confirm-btn {{!issueList[curIssIndex].complete?'disabled':''}}"
                                            disabled="{{!issueList[curIssIndex].complete}}" @tap="confirmQuestion">
                                        确认
                                    </button>
                                </view>
                            </view>
                            <view hidden="{{curTab!=2}}">
                                <view class="picture" @tap="uploadImage">
                                    <image wx:if="{{issueDiy.question.picURL}}" class="img" mode="aspectFill"
                                           src="{{issueDiy.question.picURL}}"></image>
                                    <block wx:else>
                                        <image class="add-img" src="../img/picture-add.png"></image>
                                        <text class="add-desc">添加照片</text>
                                    </block>
                                </view>
                                <view class="qsn-input">
                                    <view class="qsn">
                                        <input class="input" placeholder="输入问题" maxlength="35"
                                               value="{{issueDiy.question.content}}"
                                               bindinput="questionInput"/>
                                    </view>
                                </view>
                                <view class="aws-input">
                                    <view class="li {{item.isRight?'cur':''}}" wx:for="{{issueDiy.answerList}}"
                                          wx:for-item="item" wx:for-index="a_index" wx:key="diy_{{a_index}}">
                                        <input class="txt" placeholder="{{item.isRight?'输入正确答案':'输入错误答案'}}"
                                               maxlength="16" value="{{item.content}}"
                                               bindinput="answerInput({{a_index}})"/>
                                        <view class="sub" @tap="setAnswer({{a_index}})">设为正确</view>
                                    </view>
                                </view>
                                <view class="buttons">
                                    <button plain="true" class="btn add-btn {{!issueDiy.complete?'disabled':''}}"
                                            disabled="{{!issueDiy.complete}}" @tap="confirmQuestion">
                                        确定
                                    </button>
                                </view>
                            </view>
                        </view>
                    </view>
                </view>
            </scroll-view>
        </view>

    </view>
</template>
<script>
    import wepy from 'wepy'
    import {http, apis} from '../lib/inter.js'
    import utils from '../lib/utils.js'

    import qiniuUploader from '../lib/qiniu/qiniuUploader.js'


    export default class CreateIssue extends wepy.page {
        data = {
            id: 0,
            recover: 0,
            curTab: 1,
            issueList: [],
            curIssIndex: 0,
            issScrollLeft: 0,
            issueDiy: {
                question: {
                    content: '',
                    picURL: ''
                },
                answerList: [{
                    content: '',
                    isRight: 0
                }, {
                    content: '',
                    isRight: 0
                }, {
                    content: '',
                    isRight: 0
                }, {
                    content: '',
                    isRight: 0
                }],
                complete: false
            },
            animationData: {},
            noRecommend: false,
            uptoken: '',
            lastRecommendId: 0,
            cantInput: false,
        }

        clearData() {
            this.curTab = 1;
            this.issueList = [];
            this.curIssIndex = 0;
            this.issScrollLeft = 0;
            this.issueDiy = {
                question: {
                    content: '',
                    picURL: ''
                },
                answerList: [{
                    content: '',
                    isRight: 0
                }, {
                    content: '',
                    isRight: 0
                }, {
                    content: '',
                    isRight: 0
                }, {
                    content: '',
                    isRight: 0
                }],
                complete: false
            };
            this.noRecommend = false;
            this.uptoken = '';
            this.lastRecommendId = 0;
            this.cantInput = false;
        }

        computed = {
            indexs(){
                let res = [0, 1, 2, 3, 4];
                if (this.curIssIndex < 4) {
                    return res;
                } else {
                    /*let diff = this.curIssIndex - 4;
                     return res.map(item => {
                     return item + diff;
                     });*/
                    return this.issueList;
                }
            }
        }
        methods = {
            changeIndex(index){
                if (index <= this.issueList.length - 1) {
                    this.curIssIndex = index;
                    this.curTab = 1;
//                    this.cantInput = (index != this.issueList.length - 1);
                }
                this.$apply();
            },
            tabHandler(num){
                this.curTab = num;
                if (this.curTab == 1) {
                    this.issueList[this.issueList.length - 1] = this.lastRecIssue;
                } else {
                    this.lastRecIssue = this.issueList[this.issueList.length - 1];
                    this.issueList[this.issueList.length - 1] = this.issueDiy;
                }
                this.$apply();
                this.getWxPage().setData({
                    issueList: this.issueList
                });
            },
            questionInput(e){
                let content = e.detail.value.trim() || ''
                let issue;
                if (this.curTab == 1) {
                    issue = this.issueList[this.curIssIndex];
                } else {
                    issue = this.issueDiy;
                }
                if (issue) {
                    issue.question.content = content;
                    issue.complete = !this.checkIssue(issue);
                    this.$apply()
                }
            },
            answerInput(index, e){
                let content = e.detail.value.trim() || ''
                let issue;
                if (this.curTab == 1) {
                    issue = this.issueList[this.curIssIndex];
                } else {
                    issue = this.issueDiy;
                }
                issue.answerList[index].content = content;
                issue.complete = !this.checkIssue(issue);
                this.$apply()
            },
            setAnswer(num){
//                if (this.cantInput) {
//                    return;
//                }
                let issue;
                if (this.curTab == 1) {
                    issue = this.issueList[this.curIssIndex];
                } else {
                    issue = this.issueDiy;
                }
                issue.answerList.forEach((item, i) => {
                    if (i == num) {
                        item.isRight = 1;
                    } else {
                        item.isRight = 0;
                    }
                })
                issue.complete = !this.checkIssue(issue);
                this.$apply();
                if (this.curTab == 1) {
                    this.getWxPage().setData({
                        issueList: this.issueList
                    });
                } else {
                    this.getWxPage().setData({
                        issueDiy: this.issueDiy
                    });
                }

            },
            async changeQuestion(){
                if (!this.noRecommend) {
                    let newIss = await this.getNewIssue();
                    if (newIss) {
                        this.issueList[this.issueList.length - 1] = newIss;
                        this.$apply();
                        this.getWxPage().setData({
                            issueList: this.issueList
                        });
                    }
                }

            },
            confirmQuestion: utils.debounce(async () => {
                let curIssue = this.curTab == 1 ? this.issueList[this.curIssIndex] : this.issueDiy;
                let msg = this.checkIssue(curIssue);
                if (msg) {
                    wx.showModal({
                        content: msg,
                        showCancel: false
                    });
                    return;
                }
                let commitIssue = await this.commitIssue(curIssue);
                if (!commitIssue) {
                    return;
                }
                if (this.curTab == 2) {
                    this.clearIssueDiy();
                }
                if (this.curIssIndex < 4) {
                    this.addQuestion()
                } else {
                    wx.showModal({
                        content: '没过瘾？你还可以多出几道题刁难大家哟',
                        cancelText: '增加1题',
                        confirmText: '完成出题',
                        success: res => {
                            if (res.confirm) {
                                this.finishQuestion();
                            } else {
                                this.addQuestion()
                            }
                        }
                    });
                }

            }),
            uploadImage(){
                wx.chooseImage({
                    count: 1,
                    success: res => {
                        let filePath = res.tempFilePaths[0];
                        qiniuUploader.upload(filePath, (res) => {
                            // 参考http://developer.qiniu.com/docs/v6/api/overview/up/response/simple-response.html
                            this.issueDiy.question.picURL = res.imageURL;
                            this.$apply();
                        }, (error) => {
                            console.log('error: ' + error);
                        }, {
                            region: 'ECN',
                            uploadURL: 'https://up.qbox.me',
                            domain: 'http://redpackagelite.static.immocha.com/',
                            uptoken: this.uptoken, // 由其他程序生成七牛 uptoken
                        });
                    }
                })
            }

        }
        /*
         * 获取未完成红包历史题目
         * */
        async incompleteRedPack() {
            let res = await http.post(apis.incompleteRedPack, {});
            if (res._ok) {
                this.issueList = res.qaList;
            }
        }

        /*
         * diy问题对象清空
         * */
        clearIssueDiy() {
            this.issueDiy = {
                question: {
                    content: '',
                    picURL: ''
                },
                answerList: [{
                    content: '',
                    isRight: 0
                }, {
                    content: '',
                    isRight: 0
                }, {
                    content: '',
                    isRight: 0
                }, {
                    content: '',
                    isRight: 0
                }],
                complete: false
            }
            this.$apply();
        }

        /*
         * 增加一题
         * */
        async addQuestion() {
            //切题动画
            /*let animation = wx.createAnimation({
             duration: 300,
             })
             animation.scale(0, 1).step();
             this.animationData = animation.export();
             this.hideTextarea = true;
             this.$apply();
             setTimeout(async () => {
             animation.scale(1, 1).step();
             this.animationData = animation.export();
             this.$apply();
             await utils.sleep(0.2);
             this.hideTextarea = false;
             this.$apply();
             }, 300);*/

            this.curTab = 1;
            this.curIssIndex++;
            let newIss = await this.getNewIssue();
            newIss && this.issueList.push(newIss);
            this.issScrollLeft = 9999;
            this.$apply();
            this.getWxPage().setData({
                issScrollLeft: this.issScrollLeft,
                issueList: this.issueList
            });
        }

        /*
         * 获得一个推荐问题
         * */
        async getNewIssue() {
            let newIss = this.issueDiy;
            let res = await http.post(apis.recommendQuestion, {
                redPackageID: this.id,
                questionID: this.lastRecommendId
            }, false, false);
            if (res._ok) {
                if (res.question) {
                    this.lastRecommendId = res.question.id;
                    let complete = !this.checkIssue({question: res.question, answerList: res.answerList});
                    newIss = {question: res.question, answerList: res.answerList, complete: complete}
                } else {
                    this.noRecommend = true;
                    wx.showModal({
                        content: '已经没有可推荐的题目了，请出自定义题目吧',
                        showCancel: false,
                        success: () => {
                            this.curTab = 2;
                            this.$apply();
                        }
                    });
                }
            }
            return newIss;
        }

        /*
         * 检测问题是否完整
         * */
        checkIssue(curIssue) {
            if (!curIssue.question.content.trim()) {
                return '请填写问题';
            }
            let setRight = false;
            let checkAnswer = curIssue.answerList.some(item => {
                if (!item.content.trim()) {
                    return true;
                }
                if (!setRight && item.isRight) {
                    setRight = true;
                }
            })
            if (checkAnswer) {
                return '请完整填写全部答案';
            }
            if (!setRight) {
                return '请设置一个正确答案';
            }
            return '';
        }

        /*
         * 提交问题
         * */
        async commitIssue(curIssue) {
            //按接口修改answer内字段
            let answerList = [];
            curIssue.answerList.forEach(item => {
                answerList.push({
                    id: item.id,
                    content: item.content,
                    rightFlag: item.isRight
                })
            });
            let res = await http.post(apis.commitQuestion, { //todo
                redPackageID: this.id,
                updateQuestionID: 0,
                questionStr: JSON.stringify({
                    updateQuestionID: curIssue.question.uninId || 0,
                    recQuestionID: curIssue.question.id || 0,
                    content: curIssue.question.content,
                    picURL: curIssue.question.picURL,
                    authorUserID: wepy.$instance.globalData.userInfo.id,
                }),
                answerListStr: JSON.stringify(answerList)
            }, false, false);
            if (res._ok) {
                this.issueList[this.issueList.length - 1].question.uninId = res.questionID;
                return true;
            } else {
                return false;
            }
        }

        /*
         * 出完所有题了
         * */
        async finishQuestion() {
            let res = await http.post(apis.finishQuestion, {
                redPackageID: this.id
            })
            if (res._ok) {
                wx.redirectTo({
                    url: `shareRedPack?id=${this.id}&amount=${res.totalFee}&count=${res.questionCount}`
                })
            }
        }

        async getUptoken() {
            let res = await http.post(apis.qiniuToken)
            if (res._ok) {
                this.uptoken = res.token;
            }
        }

        onLoad(e) {
            this.clearData();
            this.id = e.id;
            this.recover = e.recover || 0;
        }

        async onShow() {
            console.log(wepy.$instance.globalData.userInfo.id);
            if (this.recover) {
                await this.incompleteRedPack();
                this.curIssIndex = this.issueList.length
            }
            let newIss = await this.getNewIssue();
            newIss && this.issueList.push(newIss);
            this.issScrollLeft = 9999;
            this.$apply();
            this.getWxPage().setData({
                issScrollLeft: this.issScrollLeft,
                issueList: this.issueList
            });
            this.getUptoken();
        }

        onShareAppMessage() {
            let rand = parseInt(Math.random() * 3) + 1;
            return {
                title: wepy.$instance.globalData.shareInfo[rand],
                path: 'pages/index',
                imageUrl: `../img/share-title${rand}.png`
            }
        }
    }

</script>
<style lang="less" rel="stylesheet/less">
    .createIssue-page {
        .iss-index {
            white-space: nowrap;
            font-size: 0;
            width: unit(550, rpx);
            height: unit(54, rpx);
            margin: unit(26, rpx) auto;
            overflow-x: hidden;
            .li {
                position: relative;
                display: inline-block;
                padding-right: unit(70, rpx);
                &.cur {
                    color: #CD3434;
                    border-color: #CD3434;
                }
                &.ed {
                    color: #CD3434;
                    background: #FFDBDB;
                    border-color: #FFDBDB;
                }
                &:after {
                    content: '';
                    display: block;
                    position: absolute;
                    left: unit(54, rpx);
                    top: unit(26, rpx);
                    height: unit(3, rpx);
                    background: #BFBFBF;
                    width: unit(70, rpx);
                }
                &:last-child {
                    padding-right: 0;
                    &:after {
                        display: none;
                    }
                }
                .num {
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    box-sizing: border-box;
                    font-size: unit(30, rpx);
                    border: 1px solid #808080;
                    width: unit(54, rpx);
                    height: unit(54, rpx);
                    border-radius: unit(54, rpx);
                    &.prev {
                        border-color: #FFDBDB;
                        color: #CD3434;
                        background: #FFDBDB;
                    }
                    &.cur {
                        border-color: #CD3434;
                        color: #CD3434;
                        background: #FFF;
                    }
                }
            }
        }
        .tab {
            display: flex;
            justify-content: space-between;
            height: unit(96, rpx);
            line-height: unit(96, rpx);
            padding: 0 unit(96, rpx);
            background: #FFF;
            margin-bottom: unit(20, rpx);
            .item {
                margin: 0 unit(45, rpx);
                font-size: unit(32, rpx);
                box-sizing: border-box;
                color: #A5A5A5;
                &.cur {
                    color: #CD3434;
                    border-bottom: unit(4, rpx) solid #CD3434;
                }
            }
        }
        .content {
            display: flex;
            box-sizing: border-box;
            flex: 1;
            height: unit(400, rpx);
            background: #FFF;
            .scroll-view {
                display: block;
                flex: 1;
                .scroll-cont {
                    position: relative;
                    padding: unit(44, rpx) unit(96, rpx);
                    .iss-list {
                        width: 100%;
                        overflow: hidden;
                        white-space: nowrap;
                        font-size: 0;
                        .item {
                            display: inline-block;
                            width: unit(558, rpx);
                        }
                    }

                }
            }
            .picture {
                display: flex;
                justify-content: center;
                align-items: center;
                flex-direction: column;
                width: unit(558, rpx);
                height: unit(336, rpx);
                margin: 0 auto;
                background: #FAFAFA;
                .img {
                    width: 100%;
                    height: 100%;
                }
                .add-img {
                    width: unit(70, rpx);
                    height: unit(70, rpx);
                    margin-bottom: unit(26, rpx);
                }
                .add-desc {
                    color: #DEDEDE;
                    font-size: unit(26, rpx);
                }
            }
            .qsn-input {
                margin-top: unit(40, rpx);
                font-size: 16px;
                .qsn {
                    padding: unit(20, rpx) 0;
                    border-bottom: 1px solid #DEDEDE;
                }
                .input {
                    font-size: 16px;
                    width: 100%;
                }
                .textarea-placeholder {
                    color: #DEDEDE;
                }
            }
            .aws-input {
                margin-top: unit(40, rpx);
                .li {
                    display: flex;
                    height: unit(84, rpx);
                    padding: unit(18, rpx) 0;
                    box-sizing: border-box;
                    border-bottom: 1px solid #DEDEDE;
                    .txt {
                        font-size: 14px;
                        flex: 1;
                        width: 200px;
                    }
                    .sub {
                        font-size: unit(24, rpx);
                        color: #F49A51;
                        width: unit(110, rpx);
                        display: flex;
                        justify-content: flex-end;
                        align-items: center;
                        border-left: unit(1, rpx) solid #DEDEDE;
                    }
                    &.cur {
                        .txt {
                            color: #CD3434;
                        }
                        .sub {
                            color: #CD3434;
                        }
                        .input-placeholder {
                            color: #CD3434;
                        }
                    }
                }
            }
            .buttons {
                margin-top: unit(48, rpx);
                display: flex;
                justify-content: space-between;
                .btn {
                    display: block;
                    width: unit(254, rpx);
                    height: unit(86, rpx);
                    border-radius: unit(86, rpx);
                    line-height: unit(86, rpx);
                    text-align: center;
                    font-size: unit(32, rpx);
                    font-weight: 500;
                    border: 1px solid #CD3434;
                    margin: 0;
                    &.change-btn {
                        color: #CD3434;
                        background: #FFF;
                    }
                    &.confirm-btn {
                        color: #FFF;
                        background: #CD3434;
                    }
                    &.add-btn {
                        width: 100%;
                        color: #FFF;
                        background: #CD3434;
                    }
                    &.disabled {
                        border-color: #DEDEDE;
                        background: #DEDEDE;
                    }
                }

            }
        }
    }
</style>

