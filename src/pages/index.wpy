<template>
    <view class="index-page container">
        <view class="explain">
            <view class="cont">
                <image class="icon" src="../img/icon-wh.png"></image>
                玩法说明
            </view>
        </view>
        <view class="begin-box">
            <image class="bg" src="../img/begin-bg.png"></image>
            <view class="box">
                <view class="photo">
                    <image class="img" src="{{headPhoto}}"></image>
                </view>
                <view class="input-box">
                    <view class="label">红包(元)</view>
                    <input class="input" type="digit" placeholder="输入红包金额" value="{{amount}}" bindinput="amountInput"
                           bindblur="amountBlur"/>
                </view>
                <view class="tip">需支付￥{{serviceFee}}手续费</view>
                <button plain="true" class="begin-button {{(incomplete||!amountAbs)?'disabled':''}}"
                        disabled="{{(incomplete||!amountAbs)}}" @tap="gameStart">
                    开始出题
                </button>
            </view>
        </view>
        <view class="tip">24小时内未被领取，则红包原路退回</view>
    </view>
</template>

<script>
    import wepy from 'wepy'
    import {http, apis} from '../lib/inter.js'
    import utils from '../lib/utils.js'
    import wxRequestPayment from '../lib/wxRequestPayment.js'

    export default class Index extends wepy.page {
        config = {
            navigationBarTitleText: '冲顶超人',
            enablePullDownRefresh: true
        }
        data = {
            headPhoto: wepy.$instance.globalData.userInfo.headPicURL,
            amount: '',
            incomplete: true
        }
        computed = {
            serviceFee(){
                let res = 0;
                if (this.amount) {
                    let abs = Number(this.amount);
                    let amount = isNaN(abs) ? '' : abs;
                    res = Math.ceil(amount) / 100;
                }
                return Number(res).toFixed(2);
            },
            amountAbs(){
                let abs = Number(this.amount);
                return isNaN(abs) ? '' : abs;
            }
        }
        methods = {
            amountInput(e){
                this.amount = e.detail.value.trim() || '';
                this.$apply();
            },
            amountBlur(e){
                let value = e.detail.value.trim() || '';
                value = parseFloat(value);
                if (isNaN(value)) {
                    value = '';
                } else {
                    value = value.toFixed(2);
                }
                this.amount = value;
                this.$apply();
            },
            async gameStart(){
                let amount = +this.amount + +this.serviceFee;
                this.recharge(amount);
                this.buyRedPackage();
            }
        }

        async getBalance() {
            let res = await http.post(apis.balanceInfo, {});
            if (res._ok) {
                this.balance = Number(res.balance || 0).toFixed(2);
                this.$apply();
            }
        }

        async recharge(amount) {
            let res = await http.post(apis.recharge, {
                chargePrice: amount
            });
            if (res._ok) {
                let payParam = res.weixinpayParamLite || {};
                wxRequestPayment(payParam, async () => {
                    let rrr = await http.post(apis.rechargeResult, {
                        orderID: res.orderID
                    });
                    if (rrr._ok) {
                        if (rrr.payResult.payStatus == 10) {
                            this.buyRedPackage();
                        }
                    }
                });
            }
        }

        async buyRedPackage() {
            let res = await http.post(apis.buyRedPack, {
                redPackagePrice: this.amount
            });
            if (res._ok) {
                let id = res._result;
                wx.navigateTo({
                    url: 'createIssue?id=' + id
                })
            }
        }

        async incompleteRedPack() {
            let res = await http.post(apis.incompleteRedPack, {});
            if (res._ok) {
                if (res.redPackageID) {
                    this.incomplete = true;
                    wx.showModal({
                        content: '你有一个未完成红包，需要先完成出题',
                        confirmText: '继续出题',
                        showCancel: false,
                        success: wres => {
                            if (wres.confirm) {
                                wx.navigateTo({
                                    url: 'createIssue?recover=1&&id=' + res.redPackageID
                                })
                            }
                        }
                    })
                } else {
                    this.incomplete = false;
                }
            }
        }

        onShow() {
//            this.getBalance();
            this.incompleteRedPack();
        }

        onPullDownRefresh() {
            this.incompleteRedPack();
        }

        onShareAppMessage() {
            let rand = parseInt(Math.random() * 3) + 1;
            return {
                title: wepy.$instance.globalData.appName,
                path: 'pages/index',
                imageUrl: `../img/share-title${rand}.png`
            }
        }
    }
</script>

<style lang="less" rel="stylesheet/less">
    .index-page {
        .explain {
            margin: unit(46, rpx) unit(30, rpx) unit(15, rpx);
            display: flex;
            align-items: center;
            justify-content: flex-end;
            .cont {
                display: flex;
                align-items: center;
                color: #CD3434;
                font-size: unit(26, rpx);
                .icon {
                    width: unit(26, rpx);
                    height: unit(26, rpx);
                    margin-right: unit(8, rpx);
                }
            }

        }
        .begin-box {
            position: relative;
            width: unit(698, rpx);
            height: unit(650, rpx);
            margin: 0 auto;
            .bg {
                width: unit(698, rpx);
                height: unit(650, rpx);
                position: absolute;
                left: 0;
                top: 0;
            }
            .box {
                position: absolute;
                width: 100%;
                height: 100%;
                left: 0;
                top: 0;
                z-index: 1;
                padding: 0 unit(64, rpx);
                box-sizing: border-box;
                .photo {
                    display: block;
                    width: unit(126, rpx);
                    height: unit(126, rpx);
                    margin: unit(12, rpx) auto;
                    overflow: hidden;
                    border-radius: unit(126, rpx);;
                    .img {
                        width: 100%;
                        height: 100%;
                    }
                }
                .input-box {
                    display: flex;
                    margin: unit(110, rpx) 0 unit(100, rpx);
                    .label {
                        flex: 1;
                        font-size: unit(32, rpx);
                        height: unit(64, rpx);
                        line-height: unit(64, rpx);
                    }
                    .input {
                        font-size: unit(32, rpx);
                        height: unit(64, rpx);
                        line-height: unit(64, rpx);
                        width: unit(404, rpx);
                        border-bottom: 1px solid #DEDEDE;
                    }
                    .input-placeholder {
                        color: #DEDEDE;
                    }
                }
                .tip {
                    color: #A5A5A5;
                    font-size: unit(26, rpx);
                    text-align: center;
                }
                .begin-button {
                    margin-top: unit(38, rpx);
                    width: unit(558, rpx);
                    height: unit(80, rpx);
                    border-radius: unit(80, rpx);
                    background: #CD3434;
                    text-align: center;
                    color: #FFF;
                    font-size: unit(32, rpx);
                    &.disabled {
                        background: #DEDEDE;
                    }
                }
            }

        }
        .tip {
            margin-top: unit(50, rpx);
            color: #BFBFBF;
            font-size: unit(26, rpx);
            text-align: center;
        }
    }
</style>
